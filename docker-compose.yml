services:
  mysql:
    image: mysql:8.0
    restart: always
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: vendor_shop_management
      MYSQL_ROOT_HOST: "%"
    volumes:
      - mysql-data:/var/lib/mysql
      - ./backend/config/init/schema.sql:/docker-entrypoint-initdb.d/schema.sql
      - ./backend/config/init/init-mysql.sh:/docker-entrypoint-initdb.d/init-mysql.sh
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - app-network
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "root",
          "-ppassword",
        ]
      interval: 5s
      timeout: 5s
      retries: 20

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 20

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: development
      PORT: 5000
      DB_HOST: mysql
      DB_USER: root
      DB_PASSWORD: password
      DB_NAME: vendor_shop_management
      DB_PORT: 3306
      REDIS_HOST: redis
      REDIS_PORT: 6379
    volumes:
      - ./backend:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    # Delay backend startup to ensure DB is fully initialized
    command: >
      sh -c "
        echo 'Waiting for 5 seconds before starting backend...' &&
        sleep 5 &&
        node server.js
      "

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://backend:5000
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  mysql-data:
  redis-data:
